// Code generated by bpf2go; DO NOT EDIT.
//go:build arm64be || armbe || mips || mips64 || mips64p32 || ppc64 || s390 || s390x || sparc || sparc64
// +build arm64be armbe mips mips64 mips64p32 ppc64 s390 s390x sparc sparc64

package main

import (
	"bytes"
	_ "embed"
	"fmt"
	"io"

	"github.com/cilium/ebpf"
)

// LoadUretProbeBashHistory returns the embedded CollectionSpec for UretProbeBashHistory.
func LoadUretProbeBashHistory() (*ebpf.CollectionSpec, error) {
	reader := bytes.NewReader(_UretProbeBashHistoryBytes)
	spec, err := ebpf.LoadCollectionSpecFromReader(reader)
	if err != nil {
		return nil, fmt.Errorf("can't load UretProbeBashHistory: %w", err)
	}

	return spec, err
}

// LoadUretProbeBashHistoryObjects loads UretProbeBashHistory and converts it into a struct.
//
// The following types are suitable as obj argument:
//
//     *UretProbeBashHistoryObjects
//     *UretProbeBashHistoryPrograms
//     *UretProbeBashHistoryMaps
//
// See ebpf.CollectionSpec.LoadAndAssign documentation for details.
func LoadUretProbeBashHistoryObjects(obj interface{}, opts *ebpf.CollectionOptions) error {
	spec, err := LoadUretProbeBashHistory()
	if err != nil {
		return err
	}

	return spec.LoadAndAssign(obj, opts)
}

// UretProbeBashHistorySpecs contains maps and programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type UretProbeBashHistorySpecs struct {
	UretProbeBashHistoryProgramSpecs
	UretProbeBashHistoryMapSpecs
}

// UretProbeBashHistorySpecs contains programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type UretProbeBashHistoryProgramSpecs struct {
	UretprobeBashReadline *ebpf.ProgramSpec `ebpf:"uretprobe_bash_readline"`
}

// UretProbeBashHistoryMapSpecs contains maps before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type UretProbeBashHistoryMapSpecs struct {
	Events *ebpf.MapSpec `ebpf:"events"`
}

// UretProbeBashHistoryObjects contains all objects after they have been loaded into the kernel.
//
// It can be passed to LoadUretProbeBashHistoryObjects or ebpf.CollectionSpec.LoadAndAssign.
type UretProbeBashHistoryObjects struct {
	UretProbeBashHistoryPrograms
	UretProbeBashHistoryMaps
}

func (o *UretProbeBashHistoryObjects) Close() error {
	return _UretProbeBashHistoryClose(
		&o.UretProbeBashHistoryPrograms,
		&o.UretProbeBashHistoryMaps,
	)
}

// UretProbeBashHistoryMaps contains all maps after they have been loaded into the kernel.
//
// It can be passed to LoadUretProbeBashHistoryObjects or ebpf.CollectionSpec.LoadAndAssign.
type UretProbeBashHistoryMaps struct {
	Events *ebpf.Map `ebpf:"events"`
}

func (m *UretProbeBashHistoryMaps) Close() error {
	return _UretProbeBashHistoryClose(
		m.Events,
	)
}

// UretProbeBashHistoryPrograms contains all programs after they have been loaded into the kernel.
//
// It can be passed to LoadUretProbeBashHistoryObjects or ebpf.CollectionSpec.LoadAndAssign.
type UretProbeBashHistoryPrograms struct {
	UretprobeBashReadline *ebpf.Program `ebpf:"uretprobe_bash_readline"`
}

func (p *UretProbeBashHistoryPrograms) Close() error {
	return _UretProbeBashHistoryClose(
		p.UretprobeBashReadline,
	)
}

func _UretProbeBashHistoryClose(closers ...io.Closer) error {
	for _, closer := range closers {
		if err := closer.Close(); err != nil {
			return err
		}
	}
	return nil
}

// Do not access this directly.
//go:embed uretprobebashhistory_bpfeb.o
var _UretProbeBashHistoryBytes []byte
